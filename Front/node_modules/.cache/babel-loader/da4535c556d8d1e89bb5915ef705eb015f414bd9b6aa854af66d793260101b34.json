{"ast":null,"code":"/*import logo from '../logo_3.png';\r\nimport fullLogo from '../full_logo.png';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router';\r\n\r\nfunction Navbar() {\r\n  const [connected, toggleConnect] = useState(false);\r\n  const location = useLocation();\r\n  const [currAddress, updateAddress] = useState('0x');\r\n\r\n  async function getAddress() {\r\n    const ethers = require(\"ethers\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const addr = await signer.getAddress();\r\n    updateAddress(addr);\r\n  }\r\n\r\n  function updateButton() {\r\n    const ethereumButton = document.querySelector('.enableEthereumButton');\r\n    ethereumButton.textContent = \"Connected\";\r\n    ethereumButton.classList.remove(\"hover:bg-blue-70\");\r\n    ethereumButton.classList.remove(\"bg-blue-500\");\r\n    ethereumButton.classList.add(\"hover:bg-green-70\");\r\n    ethereumButton.classList.add(\"bg-green-500\");\r\n  }\r\n\r\n  async function connectWebsite() {\r\n    if (window.ethereum === undefined) {\r\n      alert(\"MetaMask is not installed. Please install MetaMask.\");\r\n      return;\r\n    }\r\n  \r\n    // Comprueba si el usuario está conectado a MetaMask\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n    if (accounts.length === 0) {\r\n      // El usuario no está conectado, solicita la conexión\r\n      try {\r\n        const addresses = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        const userAddress = addresses[0]; // Obtiene la primera dirección\r\n        alert(\"Connected to MetaMask with address: \" + userAddress);\r\n        // Puedes realizar otras acciones aquí después de la conexión exitosa\r\n        updateAddress(userAddress); // Actualiza la dirección del usuario\r\n        toggleConnect(true); // Marca como conectado\r\n        updateButton(); // Actualiza el botón\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Failed to connect to MetaMask. Please try again.\");\r\n      }\r\n    } else {\r\n      // El usuario ya está conectado, muestra la dirección actual\r\n      const userAddress = accounts[0]; // Obtiene la primera dirección\r\n      updateAddress(userAddress); // Actualiza la dirección del usuario\r\n      toggleConnect(true); // Marca como conectado\r\n      updateButton(); // Actualiza el botón\r\n    }\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    if(window.ethereum == undefined)\r\n      return;\r\n    let val = window.ethereum.isConnected();\r\n    if(val)\r\n    {\r\n      console.log(\"here\");\r\n      getAddress();\r\n      toggleConnect(val);\r\n      updateButton();\r\n    }\r\n\r\n    window.ethereum.on('accountsChanged', function(accounts){\r\n      window.location.replace(location.pathname)\r\n    })\r\n  });\r\n\r\n  async function connectWebsite() {\r\n    if (window.ethereum === undefined) {\r\n      alert(\"MetaMask is not installed. Please install MetaMask.\");\r\n      return;\r\n    }\r\n  \r\n    // Comprueba si el usuario está conectado a MetaMask\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n    if (accounts.length === 0) {\r\n      // El usuario no está conectado, solicita la conexión\r\n      try {\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        alert(\"Connected to MetaMask!\");\r\n        // Puedes realizar otras acciones aquí después de la conexión exitosa\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Failed to connect to MetaMask. Please try again.\");\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"\">\r\n      <nav className=\"w-screen\">\r\n        <ul className='flex items-end justify-between py-3 bg-transparent text-white pr-5'>\r\n          <li className='flex items-end ml-5 pb-2'>\r\n            <Link to=\"/\">\r\n              {/* ... (contenido del logo) *}\r\n            </Link>\r\n          </li>\r\n          <li className='w-2/6'>\r\n            <ul className='lg:flex justify-between font-bold mr-10 text-lg'>\r\n              {/* ... (enlaces y botones del Navbar) *}\r\n              <li>\r\n                <button\r\n                  className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\r\n                  onClick={connectWebsite} // Asocia la función al evento onClick del botón\r\n                >\r\n                  {connected ? \"Connected\" : \"Connect Wallet\"}\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className='text-white text-bold text-right mr-10 text-sm'>\r\n        {currAddress !== \"0x\" ? \"Connected to\" : \"Not Connected. Please login to view NFTs\"} {currAddress !== \"0x\" ? (currAddress.substring(0, 15) + '...') : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;*/","map":{"version":3,"names":[],"sources":["C:/Users/Tomi/Desktop/market_nft/Front/src/components/Navbar.js"],"sourcesContent":["/*import logo from '../logo_3.png';\r\nimport fullLogo from '../full_logo.png';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router';\r\n\r\nfunction Navbar() {\r\n  const [connected, toggleConnect] = useState(false);\r\n  const location = useLocation();\r\n  const [currAddress, updateAddress] = useState('0x');\r\n\r\n  async function getAddress() {\r\n    const ethers = require(\"ethers\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const addr = await signer.getAddress();\r\n    updateAddress(addr);\r\n  }\r\n\r\n  function updateButton() {\r\n    const ethereumButton = document.querySelector('.enableEthereumButton');\r\n    ethereumButton.textContent = \"Connected\";\r\n    ethereumButton.classList.remove(\"hover:bg-blue-70\");\r\n    ethereumButton.classList.remove(\"bg-blue-500\");\r\n    ethereumButton.classList.add(\"hover:bg-green-70\");\r\n    ethereumButton.classList.add(\"bg-green-500\");\r\n  }\r\n\r\n  async function connectWebsite() {\r\n    if (window.ethereum === undefined) {\r\n      alert(\"MetaMask is not installed. Please install MetaMask.\");\r\n      return;\r\n    }\r\n  \r\n    // Comprueba si el usuario está conectado a MetaMask\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n    if (accounts.length === 0) {\r\n      // El usuario no está conectado, solicita la conexión\r\n      try {\r\n        const addresses = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        const userAddress = addresses[0]; // Obtiene la primera dirección\r\n        alert(\"Connected to MetaMask with address: \" + userAddress);\r\n        // Puedes realizar otras acciones aquí después de la conexión exitosa\r\n        updateAddress(userAddress); // Actualiza la dirección del usuario\r\n        toggleConnect(true); // Marca como conectado\r\n        updateButton(); // Actualiza el botón\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Failed to connect to MetaMask. Please try again.\");\r\n      }\r\n    } else {\r\n      // El usuario ya está conectado, muestra la dirección actual\r\n      const userAddress = accounts[0]; // Obtiene la primera dirección\r\n      updateAddress(userAddress); // Actualiza la dirección del usuario\r\n      toggleConnect(true); // Marca como conectado\r\n      updateButton(); // Actualiza el botón\r\n    }\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    if(window.ethereum == undefined)\r\n      return;\r\n    let val = window.ethereum.isConnected();\r\n    if(val)\r\n    {\r\n      console.log(\"here\");\r\n      getAddress();\r\n      toggleConnect(val);\r\n      updateButton();\r\n    }\r\n\r\n    window.ethereum.on('accountsChanged', function(accounts){\r\n      window.location.replace(location.pathname)\r\n    })\r\n  });\r\n\r\n  async function connectWebsite() {\r\n    if (window.ethereum === undefined) {\r\n      alert(\"MetaMask is not installed. Please install MetaMask.\");\r\n      return;\r\n    }\r\n  \r\n    // Comprueba si el usuario está conectado a MetaMask\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n    if (accounts.length === 0) {\r\n      // El usuario no está conectado, solicita la conexión\r\n      try {\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        alert(\"Connected to MetaMask!\");\r\n        // Puedes realizar otras acciones aquí después de la conexión exitosa\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Failed to connect to MetaMask. Please try again.\");\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"\">\r\n      <nav className=\"w-screen\">\r\n        <ul className='flex items-end justify-between py-3 bg-transparent text-white pr-5'>\r\n          <li className='flex items-end ml-5 pb-2'>\r\n            <Link to=\"/\">\r\n              {/* ... (contenido del logo) *}\r\n            </Link>\r\n          </li>\r\n          <li className='w-2/6'>\r\n            <ul className='lg:flex justify-between font-bold mr-10 text-lg'>\r\n              {/* ... (enlaces y botones del Navbar) *}\r\n              <li>\r\n                <button\r\n                  className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\r\n                  onClick={connectWebsite} // Asocia la función al evento onClick del botón\r\n                >\r\n                  {connected ? \"Connected\" : \"Connect Wallet\"}\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className='text-white text-bold text-right mr-10 text-sm'>\r\n        {currAddress !== \"0x\" ? \"Connected to\" : \"Not Connected. Please login to view NFTs\"} {currAddress !== \"0x\" ? (currAddress.substring(0, 15) + '...') : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;*/"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}