{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tomi\\\\Desktop\\\\market_nft\\\\Front\\\\src\\\\components\\\\Navbar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Navbar() {\n  _s();\n  const [connected, setConnected] = useState(false);\n  const location = useLocation();\n  const [currAddress, updateAddress] = useState('0x');\n  useEffect(() => {\n    async function checkMetamaskConnection() {\n      if (window.ethereum) {\n        try {\n          const chainId = await window.ethereum.request({\n            method: 'eth_chainId'\n          });\n          if (chainId === '0x6b') {\n            // Sepolia chain ID\n            const accounts = await window.ethereum.request({\n              method: 'eth_accounts'\n            });\n            if (accounts.length > 0) {\n              setConnected(true);\n              const address = accounts[0];\n              updateAddress(address);\n            } else {\n              setConnected(false);\n            }\n          } else {\n            setConnected(false);\n            // Optionally, you can inform the user to switch to the Sepolia network.\n          }\n        } catch (error) {\n          setConnected(false);\n          console.error(error);\n        }\n      } else {\n        setConnected(false);\n        // Optionally, you can inform the user to install Metamask.\n      }\n    }\n\n    checkMetamaskConnection();\n  }, []);\n  async function connectWebsite() {\n    if (connected) {\n      // Perform actions that require a connected wallet.\n      // You can call your own functions here.\n    } else {\n      // Optionally, you can inform the user to connect their wallet.\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"w-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"flex items-end justify-between py-3 bg-transparent text-white pr-5\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n            onClick: connectWebsite,\n            disabled: !connected,\n            children: connected ? \"Connected\" : \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-white text-bold text-right mr-10 text-sm\",\n      children: connected ? `Connected to: ${currAddress.substring(0, 15)}...` : 'Not Connected. Please login to view NFTs'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Navbar, \"bvfsGw/MTuLu+Jut527E9iFvuAA=\", false, function () {\n  return [useLocation];\n});\n_c = Navbar;\nexport default Navbar;\n\n/*import logo from '../logo_3.png';\r\nimport fullLogo from '../full_logo.png';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router';\r\n\r\nfunction Navbar() {\r\n  const [connected, toggleConnect] = useState(false);\r\n  const location = useLocation();\r\n  const [currAddress, updateAddress] = useState('0x');\r\n\r\n  async function getAddress() {\r\n    const ethers = require(\"ethers\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const addr = await signer.getAddress();\r\n    updateAddress(addr);\r\n  }\r\n\r\n  function updateButton() {\r\n    const ethereumButton = document.querySelector('.enableEthereumButton');\r\n    ethereumButton.textContent = \"Connected\";\r\n    ethereumButton.classList.remove(\"hover:bg-blue-70\");\r\n    ethereumButton.classList.remove(\"bg-blue-500\");\r\n    ethereumButton.classList.add(\"hover:bg-green-70\");\r\n    ethereumButton.classList.add(\"bg-green-500\");\r\n  }\r\n\r\n  async function connectWebsite() {\r\n    if (window.ethereum === undefined) {\r\n      alert(\"MetaMask is not installed. Please install MetaMask.\");\r\n      return;\r\n    }\r\n  \r\n    // Comprueba si el usuario está conectado a MetaMask\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n    if (accounts.length === 0) {\r\n      // El usuario no está conectado, solicita la conexión\r\n      try {\r\n        const addresses = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        const userAddress = addresses[0]; // Obtiene la primera dirección\r\n        alert(\"Connected to MetaMask with address: \" + userAddress);\r\n        // Puedes realizar otras acciones aquí después de la conexión exitosa\r\n        updateAddress(userAddress); // Actualiza la dirección del usuario\r\n        toggleConnect(true); // Marca como conectado\r\n        updateButton(); // Actualiza el botón\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Failed to connect to MetaMask. Please try again.\");\r\n      }\r\n    } else {\r\n      // El usuario ya está conectado, muestra la dirección actual\r\n      const userAddress = accounts[0]; // Obtiene la primera dirección\r\n      updateAddress(userAddress); // Actualiza la dirección del usuario\r\n      toggleConnect(true); // Marca como conectado\r\n      updateButton(); // Actualiza el botón\r\n    }\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    if(window.ethereum == undefined)\r\n      return;\r\n    let val = window.ethereum.isConnected();\r\n    if(val)\r\n    {\r\n      console.log(\"here\");\r\n      getAddress();\r\n      toggleConnect(val);\r\n      updateButton();\r\n    }\r\n\r\n    window.ethereum.on('accountsChanged', function(accounts){\r\n      window.location.replace(location.pathname)\r\n    })\r\n  });\r\n\r\n  async function connectWebsite() {\r\n    if (window.ethereum === undefined) {\r\n      alert(\"MetaMask is not installed. Please install MetaMask.\");\r\n      return;\r\n    }\r\n  \r\n    // Comprueba si el usuario está conectado a MetaMask\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n    if (accounts.length === 0) {\r\n      // El usuario no está conectado, solicita la conexión\r\n      try {\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        alert(\"Connected to MetaMask!\");\r\n        // Puedes realizar otras acciones aquí después de la conexión exitosa\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Failed to connect to MetaMask. Please try again.\");\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"\">\r\n      <nav className=\"w-screen\">\r\n        <ul className='flex items-end justify-between py-3 bg-transparent text-white pr-5'>\r\n          <li className='flex items-end ml-5 pb-2'>\r\n            <Link to=\"/\">\r\n              {/* ... (contenido del logo) *}\r\n            </Link>\r\n          </li>\r\n          <li className='w-2/6'>\r\n            <ul className='lg:flex justify-between font-bold mr-10 text-lg'>\r\n              {/* ... (enlaces y botones del Navbar) *}\r\n              <li>\r\n                <button\r\n                  className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\r\n                  onClick={connectWebsite} // Asocia la función al evento onClick del botón\r\n                >\r\n                  {connected ? \"Connected\" : \"Connect Wallet\"}\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className='text-white text-bold text-right mr-10 text-sm'>\r\n        {currAddress !== \"0x\" ? \"Connected to\" : \"Not Connected. Please login to view NFTs\"} {currAddress !== \"0x\" ? (currAddress.substring(0, 15) + '...') : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;*/\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","Navbar","_s","connected","setConnected","location","currAddress","updateAddress","checkMetamaskConnection","window","ethereum","chainId","request","method","accounts","length","address","error","console","connectWebsite","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","substring","_c","$RefreshReg$"],"sources":["C:/Users/Tomi/Desktop/market_nft/Front/src/components/Navbar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction Navbar() {\r\n  const [connected, setConnected] = useState(false);\r\n  const location = useLocation();\r\n  const [currAddress, updateAddress] = useState('0x');\r\n\r\n  useEffect(() => {\r\n    async function checkMetamaskConnection() {\r\n      if (window.ethereum) {\r\n        try {\r\n          const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n          if (chainId === '0x6b') { // Sepolia chain ID\r\n            const accounts = await window.ethereum.request({ method: 'eth_accounts' });\r\n            if (accounts.length > 0) {\r\n              setConnected(true);\r\n              const address = accounts[0];\r\n              updateAddress(address);\r\n            } else {\r\n              setConnected(false);\r\n            }\r\n          } else {\r\n            setConnected(false);\r\n            // Optionally, you can inform the user to switch to the Sepolia network.\r\n          }\r\n        } catch (error) {\r\n          setConnected(false);\r\n          console.error(error);\r\n        }\r\n      } else {\r\n        setConnected(false);\r\n        // Optionally, you can inform the user to install Metamask.\r\n      }\r\n    }\r\n\r\n    checkMetamaskConnection();\r\n  }, []);\r\n\r\n  async function connectWebsite() {\r\n    if (connected) {\r\n      // Perform actions that require a connected wallet.\r\n      // You can call your own functions here.\r\n    } else {\r\n      // Optionally, you can inform the user to connect their wallet.\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <nav className=\"w-screen\">\r\n        <ul className='flex items-end justify-between py-3 bg-transparent text-white pr-5'>\r\n          {/* ... Rest of your Navbar content ... */}\r\n          <li>\r\n            <button\r\n              className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\r\n              onClick={connectWebsite}\r\n              disabled={!connected}\r\n            >\r\n              {connected ? \"Connected\" : \"Connect Wallet\"}\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className='text-white text-bold text-right mr-10 text-sm'>\r\n        {connected\r\n          ? `Connected to: ${currAddress.substring(0, 15)}...`\r\n          : 'Not Connected. Please login to view NFTs'}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n  \r\n/*import logo from '../logo_3.png';\r\nimport fullLogo from '../full_logo.png';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router';\r\n\r\nfunction Navbar() {\r\n  const [connected, toggleConnect] = useState(false);\r\n  const location = useLocation();\r\n  const [currAddress, updateAddress] = useState('0x');\r\n\r\n  async function getAddress() {\r\n    const ethers = require(\"ethers\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const addr = await signer.getAddress();\r\n    updateAddress(addr);\r\n  }\r\n\r\n  function updateButton() {\r\n    const ethereumButton = document.querySelector('.enableEthereumButton');\r\n    ethereumButton.textContent = \"Connected\";\r\n    ethereumButton.classList.remove(\"hover:bg-blue-70\");\r\n    ethereumButton.classList.remove(\"bg-blue-500\");\r\n    ethereumButton.classList.add(\"hover:bg-green-70\");\r\n    ethereumButton.classList.add(\"bg-green-500\");\r\n  }\r\n\r\n  async function connectWebsite() {\r\n    if (window.ethereum === undefined) {\r\n      alert(\"MetaMask is not installed. Please install MetaMask.\");\r\n      return;\r\n    }\r\n  \r\n    // Comprueba si el usuario está conectado a MetaMask\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n    if (accounts.length === 0) {\r\n      // El usuario no está conectado, solicita la conexión\r\n      try {\r\n        const addresses = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        const userAddress = addresses[0]; // Obtiene la primera dirección\r\n        alert(\"Connected to MetaMask with address: \" + userAddress);\r\n        // Puedes realizar otras acciones aquí después de la conexión exitosa\r\n        updateAddress(userAddress); // Actualiza la dirección del usuario\r\n        toggleConnect(true); // Marca como conectado\r\n        updateButton(); // Actualiza el botón\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Failed to connect to MetaMask. Please try again.\");\r\n      }\r\n    } else {\r\n      // El usuario ya está conectado, muestra la dirección actual\r\n      const userAddress = accounts[0]; // Obtiene la primera dirección\r\n      updateAddress(userAddress); // Actualiza la dirección del usuario\r\n      toggleConnect(true); // Marca como conectado\r\n      updateButton(); // Actualiza el botón\r\n    }\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    if(window.ethereum == undefined)\r\n      return;\r\n    let val = window.ethereum.isConnected();\r\n    if(val)\r\n    {\r\n      console.log(\"here\");\r\n      getAddress();\r\n      toggleConnect(val);\r\n      updateButton();\r\n    }\r\n\r\n    window.ethereum.on('accountsChanged', function(accounts){\r\n      window.location.replace(location.pathname)\r\n    })\r\n  });\r\n\r\n  async function connectWebsite() {\r\n    if (window.ethereum === undefined) {\r\n      alert(\"MetaMask is not installed. Please install MetaMask.\");\r\n      return;\r\n    }\r\n  \r\n    // Comprueba si el usuario está conectado a MetaMask\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n    if (accounts.length === 0) {\r\n      // El usuario no está conectado, solicita la conexión\r\n      try {\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        alert(\"Connected to MetaMask!\");\r\n        // Puedes realizar otras acciones aquí después de la conexión exitosa\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Failed to connect to MetaMask. Please try again.\");\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"\">\r\n      <nav className=\"w-screen\">\r\n        <ul className='flex items-end justify-between py-3 bg-transparent text-white pr-5'>\r\n          <li className='flex items-end ml-5 pb-2'>\r\n            <Link to=\"/\">\r\n              {/* ... (contenido del logo) *}\r\n            </Link>\r\n          </li>\r\n          <li className='w-2/6'>\r\n            <ul className='lg:flex justify-between font-bold mr-10 text-lg'>\r\n              {/* ... (enlaces y botones del Navbar) *}\r\n              <li>\r\n                <button\r\n                  className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\r\n                  onClick={connectWebsite} // Asocia la función al evento onClick del botón\r\n                >\r\n                  {connected ? \"Connected\" : \"Connect Wallet\"}\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className='text-white text-bold text-right mr-10 text-sm'>\r\n        {currAddress !== \"0x\" ? \"Connected to\" : \"Not Connected. Please login to view NFTs\"} {currAddress !== \"0x\" ? (currAddress.substring(0, 15) + '...') : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;*/"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}