{"ast":null,"code":"/*import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\n    const sampleData = [\r\n        {\r\n            \"name\": \"NFT#1\",\r\n            \"description\": \"Alchemy's First NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n        {\r\n            \"name\": \"NFT#2\",\r\n            \"description\": \"Alchemy's Second NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n        {\r\n            \"name\": \"NFT#3\",\r\n            \"description\": \"Alchemy's Third NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n    ];\r\n    const [data, updateData] = useState(sampleData);\r\n    const [dataFetched, updateFetched] = useState(false);\r\n\r\n    async function getAllNFTs() {\r\n        const ethers = require(\"ethers\");\r\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        //Pull the deployed contract instance\r\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n        //create an NFT Token\r\n        let transaction = await contract.getAllNFTs()\r\n\r\n        //Fetch all the details of every NFT from the contract and display\r\n        const items = await Promise.all(transaction.map(async i => {\r\n            var tokenURI = await contract.tokenURI(i.tokenId);\r\n            tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n            let meta = await axios.get(tokenURI);\r\n            meta = meta.data;\r\n\r\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n            let item = {\r\n                price,\r\n                tokenId: i.tokenId.toNumber(),\r\n                seller: i.seller,\r\n                owner: i.owner,\r\n                image: meta.image,\r\n                name: meta.name,\r\n                description: meta.description,\r\n            }\r\n            return item;\r\n        }))\r\n\r\n        updateFetched(true);\r\n        updateData(items);\r\n    }\r\n\r\n    if(!dataFetched) getAllNFTs();\r\n\r\n    return (\r\n        <div>\r\n            <Navbar></Navbar>\r\n            <div className=\"flex flex-col place-items-center mt-20\">\r\n                <div className=\"md:text-xl font-bold text-white\">\r\n                    Top NFTs\r\n                </div>\r\n                <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n                    {data.map((value, index) => {\r\n                        return <NFTTile data={value} key={index}></NFTTile>;\r\n                    })}\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    );\r\n}*/","map":{"version":3,"names":[],"sources":["C:/Users/Tomi/Desktop/market_nft/Front/src/components/Marketplace.js"],"sourcesContent":["/*import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\n    const sampleData = [\r\n        {\r\n            \"name\": \"NFT#1\",\r\n            \"description\": \"Alchemy's First NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n        {\r\n            \"name\": \"NFT#2\",\r\n            \"description\": \"Alchemy's Second NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n        {\r\n            \"name\": \"NFT#3\",\r\n            \"description\": \"Alchemy's Third NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n    ];\r\n    const [data, updateData] = useState(sampleData);\r\n    const [dataFetched, updateFetched] = useState(false);\r\n\r\n    async function getAllNFTs() {\r\n        const ethers = require(\"ethers\");\r\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        //Pull the deployed contract instance\r\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n        //create an NFT Token\r\n        let transaction = await contract.getAllNFTs()\r\n\r\n        //Fetch all the details of every NFT from the contract and display\r\n        const items = await Promise.all(transaction.map(async i => {\r\n            var tokenURI = await contract.tokenURI(i.tokenId);\r\n            tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n            let meta = await axios.get(tokenURI);\r\n            meta = meta.data;\r\n\r\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n            let item = {\r\n                price,\r\n                tokenId: i.tokenId.toNumber(),\r\n                seller: i.seller,\r\n                owner: i.owner,\r\n                image: meta.image,\r\n                name: meta.name,\r\n                description: meta.description,\r\n            }\r\n            return item;\r\n        }))\r\n\r\n        updateFetched(true);\r\n        updateData(items);\r\n    }\r\n\r\n    if(!dataFetched) getAllNFTs();\r\n\r\n    return (\r\n        <div>\r\n            <Navbar></Navbar>\r\n            <div className=\"flex flex-col place-items-center mt-20\">\r\n                <div className=\"md:text-xl font-bold text-white\">\r\n                    Top NFTs\r\n                </div>\r\n                <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n                    {data.map((value, index) => {\r\n                        return <NFTTile data={value} key={index}></NFTTile>;\r\n                    })}\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    );\r\n}*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}