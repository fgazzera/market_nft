{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tomi\\\\Desktop\\\\market_nft\\\\Front\\\\src\\\\components\\\\Marketplace.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Marketplace() {\n  _s();\n  const sampleData = [\n    // Tu data de ejemplo aquí...\n  ];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    // Verifica si el usuario está conectado a la red Sepolia con el chainId 0x6b\n    if (window.ethereum && window.ethereum.chainId === \"0x6b\") {\n      setIsConnected(true);\n      getAllNFTs();\n    } else {\n      setIsConnected(false);\n    }\n  }, []);\n  async function getAllNFTs() {\n    // Tu función para obtener los NFTs aquí...\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: isConnected ? data.map((value, index) => /*#__PURE__*/_jsxDEV(NFTTile, {\n          data: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Por favor, con\\xE9ctese a la red Sepolia en MetaMask para acceder a esta aplicaci\\xF3n.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n/*import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\n    const sampleData = [\r\n        {\r\n            \"name\": \"NFT#1\",\r\n            \"description\": \"Alchemy's First NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n        {\r\n            \"name\": \"NFT#2\",\r\n            \"description\": \"Alchemy's Second NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n        {\r\n            \"name\": \"NFT#3\",\r\n            \"description\": \"Alchemy's Third NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n    ];\r\n    const [data, updateData] = useState(sampleData);\r\n    const [dataFetched, updateFetched] = useState(false);\r\n\r\n    async function getAllNFTs() {\r\n        const ethers = require(\"ethers\");\r\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        //Pull the deployed contract instance\r\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n        //create an NFT Token\r\n        let transaction = await contract.getAllNFTs()\r\n\r\n        //Fetch all the details of every NFT from the contract and display\r\n        const items = await Promise.all(transaction.map(async i => {\r\n            var tokenURI = await contract.tokenURI(i.tokenId);\r\n            tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n            let meta = await axios.get(tokenURI);\r\n            meta = meta.data;\r\n\r\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n            let item = {\r\n                price,\r\n                tokenId: i.tokenId.toNumber(),\r\n                seller: i.seller,\r\n                owner: i.owner,\r\n                image: meta.image,\r\n                name: meta.name,\r\n                description: meta.description,\r\n            }\r\n            return item;\r\n        }))\r\n\r\n        updateFetched(true);\r\n        updateData(items);\r\n    }\r\n\r\n    if(!dataFetched) getAllNFTs();\r\n\r\n    return (\r\n        <div>\r\n            <Navbar></Navbar>\r\n            <div className=\"flex flex-col place-items-center mt-20\">\r\n                <div className=\"md:text-xl font-bold text-white\">\r\n                    Top NFTs\r\n                </div>\r\n                <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n                    {data.map((value, index) => {\r\n                        return <NFTTile data={value} key={index}></NFTTile>;\r\n                    })}\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    );\r\n}*/\n_s(Marketplace, \"SelhF8Rwj3hOrHDnFbYMlWbO2Ks=\");\n_c = Marketplace;\nvar _c;\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","useEffect","GetIpfsUrlFromPinata","jsxDEV","_jsxDEV","Marketplace","_s","sampleData","data","updateData","dataFetched","updateFetched","isConnected","setIsConnected","window","ethereum","chainId","getAllNFTs","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","value","index","_c","$RefreshReg$"],"sources":["C:/Users/Tomi/Desktop/market_nft/Front/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\n  const sampleData = [\r\n    // Tu data de ejemplo aquí...\r\n  ];\r\n\r\n  const [data, updateData] = useState(sampleData);\r\n  const [dataFetched, updateFetched] = useState(false);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Verifica si el usuario está conectado a la red Sepolia con el chainId 0x6b\r\n    if (window.ethereum && window.ethereum.chainId === \"0x6b\") {\r\n      setIsConnected(true);\r\n      getAllNFTs();\r\n    } else {\r\n      setIsConnected(false);\r\n    }\r\n  }, []);\r\n\r\n  async function getAllNFTs() {\r\n    // Tu función para obtener los NFTs aquí...\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <div className=\"flex flex-col place-items-center mt-20\">\r\n        <div className=\"md:text-xl font-bold text-white\">\r\n          Top NFTs\r\n        </div>\r\n        <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n          {isConnected ? (\r\n            data.map((value, index) => (\r\n              <NFTTile data={value} key={index} />\r\n            ))\r\n          ) : (\r\n            <p>Por favor, conéctese a la red Sepolia en MetaMask para acceder a esta aplicación.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n/*import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\n    const sampleData = [\r\n        {\r\n            \"name\": \"NFT#1\",\r\n            \"description\": \"Alchemy's First NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n        {\r\n            \"name\": \"NFT#2\",\r\n            \"description\": \"Alchemy's Second NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n        {\r\n            \"name\": \"NFT#3\",\r\n            \"description\": \"Alchemy's Third NFT\",\r\n            \"website\":\"http://axieinfinity.io\",\r\n            \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n            \"price\":\"0.03ETH\",\r\n            \"currentlySelling\":\"True\",\r\n            \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n        },\r\n    ];\r\n    const [data, updateData] = useState(sampleData);\r\n    const [dataFetched, updateFetched] = useState(false);\r\n\r\n    async function getAllNFTs() {\r\n        const ethers = require(\"ethers\");\r\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        //Pull the deployed contract instance\r\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n        //create an NFT Token\r\n        let transaction = await contract.getAllNFTs()\r\n\r\n        //Fetch all the details of every NFT from the contract and display\r\n        const items = await Promise.all(transaction.map(async i => {\r\n            var tokenURI = await contract.tokenURI(i.tokenId);\r\n            tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n            let meta = await axios.get(tokenURI);\r\n            meta = meta.data;\r\n\r\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n            let item = {\r\n                price,\r\n                tokenId: i.tokenId.toNumber(),\r\n                seller: i.seller,\r\n                owner: i.owner,\r\n                image: meta.image,\r\n                name: meta.name,\r\n                description: meta.description,\r\n            }\r\n            return item;\r\n        }))\r\n\r\n        updateFetched(true);\r\n        updateData(items);\r\n    }\r\n\r\n    if(!dataFetched) getAllNFTs();\r\n\r\n    return (\r\n        <div>\r\n            <Navbar></Navbar>\r\n            <div className=\"flex flex-col place-items-center mt-20\">\r\n                <div className=\"md:text-xl font-bold text-white\">\r\n                    Top NFTs\r\n                </div>\r\n                <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n                    {data.map((value, index) => {\r\n                        return <NFTTile data={value} key={index}></NFTTile>;\r\n                    })}\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    );\r\n}*/"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,eAAe,MAAM,qBAAqB;AACjD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,oBAAoB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAMC,UAAU,GAAG;IACjB;EAAA,CACD;EAED,MAAM,CAACC,IAAI,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAACO,UAAU,CAAC;EAC/C,MAAM,CAACG,WAAW,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACpD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACd;IACA,IAAIa,MAAM,CAACC,QAAQ,IAAID,MAAM,CAACC,QAAQ,CAACC,OAAO,KAAK,MAAM,EAAE;MACzDH,cAAc,CAAC,IAAI,CAAC;MACpBI,UAAU,CAAC,CAAC;IACd,CAAC,MAAM;MACLJ,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeI,UAAUA,CAAA,EAAG;IAC1B;EAAA;EAGF,oBACEb,OAAA;IAAAc,QAAA,gBACEd,OAAA,CAACR,MAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVlB,OAAA;MAAKmB,SAAS,EAAC,wCAAwC;MAAAL,QAAA,gBACrDd,OAAA;QAAKmB,SAAS,EAAC,iCAAiC;QAAAL,QAAA,EAAC;MAEjD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNlB,OAAA;QAAKmB,SAAS,EAAC,iEAAiE;QAAAL,QAAA,EAC7EN,WAAW,GACVJ,IAAI,CAACgB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACpBtB,OAAA,CAACP,OAAO;UAACW,IAAI,EAAEiB;QAAM,GAAMC,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CACpC,CAAC,gBAEFlB,OAAA;UAAAc,QAAA,EAAG;QAAiF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MACxF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3FAhB,EAAA,CA7CwBD,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}